name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      # Step 3: Cache Python dependencies
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Step 4: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 5: Run tests
      - name: Run tests
        run: pytest

      # Step 6: Security scan (SAST)
      - name: Run Bandit Security Scan
        run: bandit -r .

      # Step 7: Build and test Docker Compose
      - name: Set up Docker Compose
        run: |
          docker-compose -f docker-compose.yml up -d
          docker-compose ps

      - name: Verify application and database
        run: |
          curl http://localhost:5000 || echo "Application did not respond"
          docker exec -it $(docker ps -q -f name=app) flask db init || true
          docker exec -it $(docker ps -q -f name=app) flask db migrate || true
          docker exec -it $(docker ps -q -f name=app) flask db upgrade || true

      # Step 8: Deploy (placeholder)
      - name: Deploy (placeholder)
        if: github.ref == 'refs/heads/main'
        run: echo "Deploying application..."
